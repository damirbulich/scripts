import { Injectable } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';

import { PaginationParams } from 'src/common/pagination/pagination.params';
import { AbstractRepository } from 'src/common/abstract/abstract.repository';

import { <%pascal%> } from '../entities/<%kebab%>.entity';
import { I<%pascal%>Record } from '../interfaces/<%kebab%>.interface';
import { I<%pascal%>Repository } from '../interfaces/<%kebab%>.repository.interface';

@Injectable()
export class <%pascal%>Repository
  extends AbstractRepository<I<%pascal%>Record>
  implements I<%pascal%>Repository
{
  constructor(
    @InjectRepository(<%pascal%>)
    repository: Repository<<%pascal%>>,
  ) {
    super(repository);
  }

  async findById(id: string): Promise<I<%pascal%>Record> {
    return await this.entity.findOne({ where: { id: id } });
  }

  async findManyAndCount({
    skip,
    limit,
  }: PaginationParams): Promise<[I<%pascal%>Record[], number]> {
    return await this.entity.findAndCount({ skip, take: limit });
  }

  async existsById(id: string): Promise<boolean> {
    return this.entity.exists({ where: { id } });
  }
}
