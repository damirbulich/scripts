import { Injectable } from '@nestjs/common';
import { EntityManager, SelectQueryBuilder } from 'typeorm';

import { PaginationParams } from 'src/common/pagination/pagination.params';

import { <%pascal%> } from '../entities/<%kebab%>.entity';
import { I<%pascal%> } from '../interfaces/<%kebab%>.interface';
import { I<%pascal%>Repository } from '../interfaces/<%kebab%>.repository.interface';

@Injectable()
export class <%pascal%>Repository implements I<%pascal%>Repository {
  constructor(private readonly entity: EntityManager) {}

  list(params: PaginationParams): Promise<[I<%pascal%>[], number]> {
    return this.getBaseQuery()
      .skip(params.skip)
      .take(params.limit)
      .orderBy('<%camel%>.createdAt', 'ASC')
      .comment('<%pascal%>Repository.list')
      .getManyAndCount();
  }

  findById(id: number): Promise<I<%pascal%>> {
    return this.getBaseQuery()
      .where('<%camel%>.id = :id', { id })
      .comment('<%pascal%>Repository.findById')
      .getOne();
  }

  async existById(id: number): Promise<boolean> {
    return this.entity
      .createQueryBuilder()
      .from(<%pascal%>, '<%camel%>')
      .where('<%camel%>.id = :id', { id })
      .comment('<%pascal%>Repository.existById')
      .getExists();
  }

  async create(<%camel%>: I<%pascal%>): Promise<I<%pascal%>> {
    const raw = await this.entity
      .createQueryBuilder()
      .insert()
      .into(<%pascal%>)
      .values(<%camel%>)
      .returning('*')
      .comment('<%pascal%>Repository.create')
      .execute();
    return raw.generatedMaps[0] as I<%pascal%>;
  }

  async update(<%camel%>: Partial<I<%pascal%>>): Promise<I<%pascal%>> {
    const raw = await this.entity
      .createQueryBuilder()
      .update(<%pascal%>)
      .set(<%camel%>)
      .where('id = :id', { id: <%camel%>.id })
      .returning('*')
      .comment('<%pascal%>Repository.update')
      .execute();
    return raw.generatedMaps[0] as I<%pascal%>;
  }

  delete(id: number): Promise<void> {
    return void this.entity
      .createQueryBuilder()
      .delete()
      .from(<%pascal%>)
      .where('id = :id', { id })
      .comment('<%pascal%>Repository.delete')
      .execute();
  }

  private getBaseQuery(): SelectQueryBuilder<<%pascal%>> {
    return this.entity
      .createQueryBuilder()
      .from(<%pascal%>, '<%camel%>')
      .select([
        '<%camel%>.id',
        '<%camel%>.createdAt',
      ]);
  }
}